package com.flipkart.aesop.runtime.producer.hbase;

import com.flipkart.aesop.runtime.producer.spi.SCNGenerator;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Provides the utility to Generate Relayer SCN from Sep Scn (i.e. TS)
 * <p/>
 * Motivation:
 * <p/>
 * SEP sends timestamp (milli) along with the event. Earlier same TS was used as Relayer SCN.
 * Issue with existing approach is : within same time (in millis), you might get multiple events.
 * Ideally each relayer event should have unique relayer SCN which was voilating in previous case because of which events were getting skipped.
 * <p/>
 * New Approach:
 * <p/>
 * Left Shift Sep TS (in millis) to 10 bits
 * (Currently TS(milli) use 42 bits.Left Shifting 10 bits is futuristic. In future TS may use more bits than 42 bits although it is very unlikely in near future.)
 * For each unique Timestamp, maintains a seqGenerator (1,2,-------n) and Add this with the resultant of above operation
 * <p/>
 * Final Scn for T0 SEPScn - ((T0<<10)|seqNumber)
 *
 * @author Milap Wadhwa
 * @version 1.2, 9 Jul 2015
 */
public class HBaseSCNGenerator implements SCNGenerator {

    /**
     * maintains previous SCN generated by SEP event (WalEdits event)
     */
    private AtomicLong prevSepScn;

    /**
     * maintains the sequence number for the last snc
     */
    private AtomicInteger eventSeq;

    public HBaseSCNGenerator() {
        prevSepScn = new AtomicLong(0);
        eventSeq = new AtomicInteger(0);
    }

    /**
     * Interface method implementation. get the Relayer Scn based on localscn
     *
     * @see com.flipkart.aesop.runtime.producer.spi.SCNGenerator#getSCN(long, java.lang.String)
     */
    @Override
    public long getSCN(long localSCN, String hostId) {
        return frameScn(localSCN);
    }

    private long frameScn(long localSCN) {
        if (localSCN == -1 || localSCN == 0) {
            return localSCN;
        }

        long scn = localSCN;
        if (prevSepScn.get() != localSCN) {
            eventSeq.set(0);
            prevSepScn.set(localSCN);
        }
        scn <<= 10;
        scn |= eventSeq.incrementAndGet();
        return scn;
    }
}
